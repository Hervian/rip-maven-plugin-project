<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>eu.mansipi</groupId>
  <artifactId>meta-server</artifactId>
  <version>1.0.0-SNAPSHOT</version>

  <description>A server whose endpoints make calls to the other servers such as to test the autogenerated Rest class</description>
  <!--<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.3</version>
  </parent>-->
  <parent>
    <groupId>eu.mansipi</groupId>
    <artifactId>rip-maven-plugin-project</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <properties>
    <maven.compiler.source>18</maven.compiler.source>
    <maven.compiler.target>18</maven.compiler.target>
	<spring.boot.version>3.0.1</spring.boot.version>
    <spring.security.version>6.0.1</spring.security.version>
    <!--<start-class>eu.mansipi.jokes_and_facts_server.Main</start-class>-->
  </properties>

<dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>io.github.openfeign</groupId>
      <artifactId>feign-jackson</artifactId>
      <version>12.1</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.24</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>eu.mansipi</groupId>
      <artifactId>webclient-server-client</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>eu.mansipi</groupId>
      <artifactId>feign-server-client</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>eu.mansipi</groupId>
      <artifactId>native-server-client</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>

    <!--<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jersey</artifactId>
    </dependency>-->

    <!--to import resilience4j decorators and circuit breaker-->
    <dependency>
      <groupId>io.github.resilience4j</groupId>
      <artifactId>resilience4j-all</artifactId>
      <version>2.0.2</version>
    </dependency>
    <!--Work in progress. Test spring starter. // resilience4j-all is then Optional, only required when you want to use the Decorators class-->
    <dependency>
      <groupId>io.github.resilience4j</groupId>
      <artifactId>resilience4j-spring-boot2</artifactId>
      <version>2.0.2</version>
    </dependency>

    <!--to import aspect oriented-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>

    <dependency>
      <groupId>io.swagger.core.v3</groupId> <!--Migration guide: https://support.intershop.com/kb/index.php/Display/2914L4-->
      <artifactId>swagger-annotations</artifactId>
      <version>2.2.0</version>
    </dependency>

    <dependency>
      <groupId>io.github.resilience4j</groupId>
      <artifactId>resilience4j-spring-boot2</artifactId>
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>io.github.resilience4j</groupId>
      <artifactId>resilience4j-reactor</artifactId>
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>io.github.resilience4j</groupId>
      <artifactId>resilience4j-circuitbreaker</artifactId>
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>io.github.resilience4j</groupId>
      <artifactId>resilience4j-feign</artifactId>
      <version>2.0.2</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
      <!--<version>2.6.4</version>-->
    </dependency>
    <!--<dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-webflux-core</artifactId>
      <version>1.6.14</version>
    </dependency>-->

    <!--below works. But trying to add this dynamically when invoking the spring-boot-maven-plugin in SpringWebfluxApiDocumentor (which should be renamed to cover spring mvn as well)-->
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webflux-api</artifactId> <!--See https://springdoc.org/v2/#migrating-from-springdoc-v1 -->
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webflux-ui</artifactId>
      <version>2.0.2</version>
    </dependency><!--/webjars/swagger-ui/index.html-->
    <!--<dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.0.2</version>
    </dependency>-->
    <!--<dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-common</artifactId>
      <version>2.0.2</version>
    </dependency>-->



    <!--After upgrading spring version from spring boot 2.7.3 to 3.0.1. Only needed because of the ExceptionMappers class&ndash;&gt;-->
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-web-api</artifactId>
      <version>8.0</version>
      <scope>provided</scope>
    </dependency>

       <!--After upgrading spring version from spring boot 2.7.3 to 3.0.1: java.lang.ClassNotFoundException: javax.xml.bind.JAXBElement&ndash;&gt;-->
        <dependency>
          <groupId>jakarta.xml.bind</groupId>
          <artifactId>jakarta.xml.bind-api</artifactId>
          <version>3.0.0</version>
        </dependency>

    <!--After upgrading spring version from spring boot 2.7.3 to 3.0.1: java.lang.ClassNotFoundException: javax.xml.bind.JAXBElement-->
   <dependency>
     <groupId>org.glassfish.jaxb</groupId>
     <artifactId>jaxb-runtime</artifactId>
     <version>4.0.1</version>
   </dependency>
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>2.3.0</version>
    </dependency>
    <!--java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory-->
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>2.3.1</version>
    </dependency>

    <!--After upgrading spring version from spring boot 2.7.3 to 3.0.1: java.lang.NoClassDefFoundError: javax/activation/DataHandler-->
    <dependency>
      <groupId>javax.activation</groupId>
      <artifactId>activation</artifactId>
      <version>1.1.1</version>
    </dependency>
  <!--
        &lt;!&ndash;After upgrading spring version from spring boot 2.7.3 to 3.0.1: java.lang.ClassNotFoundException: jakarta.xml.bind.annotation.XmlElement&ndash;&gt;
        <dependency>
          <groupId>jakarta.platform</groupId>
          <artifactId>jakarta.jakartaee-api</artifactId>
          <version>10.0.0</version>
          <scope>provided</scope>
        </dependency>

        <dependency>
          <groupId>org.glassfish.jaxb</groupId>
          <artifactId>jaxb-runtime</artifactId>
          <version>2.3.3</version>
        </dependency>-->


    <!--For testing the cache aspect:-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-cache</artifactId>
      <version>${spring.boot.version}</version></dependency>
    <dependency>
      <groupId>javax.cache</groupId>
      <artifactId>cache-api</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.ehcache</groupId>
      <artifactId>ehcache</artifactId>
      <version>3.10.8</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>

    <!--&lt;!&ndash; Spring security &ndash;&gt;
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-core</artifactId>
      <version>${spring.security.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-web</artifactId>
      <version>${spring.security.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-config</artifactId>
      <version>${spring.security.version}</version>
    </dependency>-->

  </dependencies>

  <build>
    <plugins>
      <!--<plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        &lt;!&ndash;&lt;!&ndash;<configuration>
        &lt;!&ndash;<directories>C:\Users\m83522\.m2\repository\org\springframework\boot\spring-boot-starter-webflux\2.7.0</directories>&ndash;&gt;
      </configuration>&ndash;&gt;&ndash;&gt;
        <executions>
          <execution>
            <id>pre-integration-test</id>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>post-integration-test</id>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-maven-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <phase>integration-test</phase>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <outputFileName>openapi.json</outputFileName>
          <outputDir>${project.build.directory}/openapi-spec</outputDir>
          <apiDocsUrl>http://localhost:8080/v3/api-docs</apiDocsUrl>
        </configuration>
      </plugin>-->
      <plugin>
        <groupId>com.github.hervian</groupId>
        <artifactId>rip-maven-plugin</artifactId>
        <version>${project.parent.version}</version>
        <configuration>
          <generateDocConfig>
            <additionalDocs>
              <additionalDoc>HTML2</additionalDoc>
            </additionalDocs>
          </generateDocConfig>
          <diffConfig>
            <skipCheckForBreakingChanges>true</skipCheckForBreakingChanges>
          </diffConfig>
          <generateClientConfig>
            <languages>
              <language>JAVA</language>
             <!-- <language>DART</language>-->
            </languages>
          </generateClientConfig>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>generateRest</goal>
              <goal>rip</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>16</source>
          <target>16</target><!--TODO: Works w jdk8 but not 17-->
        </configuration>
      </plugin>
	  <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring.boot.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>