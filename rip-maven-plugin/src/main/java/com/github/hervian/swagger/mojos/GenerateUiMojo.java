package com.github.hervian.swagger.mojos;

import com.github.hervian.swagger.compilation.ClassFileCopier;
import com.github.hervian.swagger.config.GenerateDocConfig;
import com.github.hervian.swagger.config.GenerateUiConfig;
import com.github.hervian.swagger.config.PropertiesReader;
import com.github.hervian.swagger.customizers.SwaggerUiFileCustomizer;
import com.github.hervian.swagger.services.SwaggerUiJaxRsResource;
import lombok.Data;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.apache.maven.shared.utils.StringUtils;
import org.codehaus.plexus.util.FileUtils;
import org.codehaus.plexus.util.io.InputStreamFacade;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.webjars.WebJarAssetLocator;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;

@Data
@Mojo(name = "generateUi", requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, defaultPhase = LifecyclePhase.COMPILE, threadSafe = true)
public class GenerateUiMojo extends AbstractMojo {
  private final Logger LOGGER = LoggerFactory.getLogger(GenerateUiMojo.class);

  @Parameter(defaultValue = "${project}", required = true, readonly = true)
  MavenProject project;

  @Parameter
  private GenerateDocConfig generateDocConfig;

  @Parameter
  private GenerateUiConfig generateUiConfig;

  private PropertiesReader propertiesReader;

  public GenerateUiMojo() throws MojoExecutionException {
    try {
      propertiesReader = new PropertiesReader();
    } catch (IOException e) {
      throw new MojoExecutionException("Error when constructing PropertiesReader object used to read properties from pom file.", e);
    }
  }

//TODO: support adding list of urls to other swagger docs and add these to swagger-ui. See https://github.com/swagger-api/swagger-ui/issues/2891
  @Override
  public void execute() throws MojoExecutionException {
    if (!propertiesReader.isSkipGenerateUi()) {
      getLog().info("Executing GenerateUiMojo (copy pastes (and modifies) swagger-ui from a webjar and generates a jax-rs annotated class to servce the swagger-ui files.)");
      validatePhaseAndGoals();

      getLog().info("copying swagger-ui files from webjar to build output dir");
      copySwaggerUiFilesToBuildOutputDir();

      getLog().info("copying SwaggerUiJaxRsResource to build output dir (i.e. a class with jax-rs annotated method that serves the swagger-ui files)");
      copySwaggerUiJaxRsResourceToBuildOutputDir();
    }
  }

  /**
   * Validate that
   * <ul>
   *   <li>the plugin has configured the goal generateSwaggerDoc
   *    * (which is mandatory as present plugin generates a swagger-ui index.html with references
   *    * to a swagger.json doc assumed to be generated by the generateSwaggerDoc goal</li>
   *    <li>the configured phase, if any, of present execution is either null (=default) or at least LifecyclePhase.COMPILE and at most LifecyclePhase.prepare-package
   * </ul>
   */
  private void validatePhaseAndGoals() {
  }

  private void copySwaggerUiFilesToBuildOutputDir() throws MojoExecutionException {
    getLog().info("copySwaggerUiFilesToBuildOutputDir");
    WebJarAssetLocator locator = new WebJarAssetLocator();
    //TODO: #1 dont hard code version, infer since this can be "overriden" in a dependency addendum to the plugin definition"
    //TODO: #2: search classpath for unknown version of swagger-ui webjar such as to allow "manual overriding" version by adding a dependency section to present plugin (or get it from plugin configuration)
    Set<String> fullPathsOfAssets = locator.listAssets("/swagger-ui/3.51.2");
    getLog().info("fullPathsOfAssets.size = " + fullPathsOfAssets.size());
    for (String path: fullPathsOfAssets){
      getLog().info(path);
    }
    try {
      List<BiFunction<String, String, String>> fileCustomizers = new ArrayList<>();
      fileCustomizers.add(new SwaggerUiFileCustomizer());
      Optional<BiFunction<String, String, String>> optionalFileCustomizerInstance = getFileCustomizer();
      if (optionalFileCustomizerInstance.isPresent()){
        fileCustomizers.add(optionalFileCustomizerInstance.get());
      }

      for (String path: fullPathsOfAssets){
        String fileName = path.substring(path.lastIndexOf('/'));
        InputStream swaggerUiFileStream = getClass().getResourceAsStream("/"+path);
        File swaggerUiFile = File.createTempFile(fileName, ".tmp");
        swaggerUiFile.deleteOnExit();
        File dest = new File(project.getBuild().getOutputDirectory() + "/swagger/ui/" + fileName);
        FileUtils.copyStreamToFile(new InputStreamFacade() {

          @Override
          public InputStream getInputStream() throws IOException
          {
            return swaggerUiFileStream;
            //return new FileInputStream(generatedSourcesDirectory);
          }
        }, dest);
        if (fileName.endsWith("index.html")){
          getLog().info(fileName + " equals 'index.html'");
          updateIndexHtmlWithPathToSwaggerDoc(dest);
        }
        customizeFile(fileCustomizers, dest, fileName);
        //swaggerUiDir = swaggerUiFile.getParentFile();
      }
    } catch (IOException e) {
      getLog().error(e);
      throw new MojoExecutionException("Unable to copy generated resources to build output folder", e);
    }
    //FileUtils.copyDirectory();
   /* try {
      FileUtils.copyDirectory(
          swaggerUiDir,
          new File(project.getBuild().getOutputDirectory() + "/swagger/ui"));
    } catch (IOException e) {
      getLog().error(e);
        throw new MojoExecutionException("Unable to copy generated resources to build output folder", e);
      }*/
  }

  private void customizeFile(List<BiFunction<String, String, String>> fileCustomizers, File dest, String fileName) throws MojoExecutionException {
    try {
      String content = org.apache.commons.io.FileUtils.readFileToString(dest, "UTF-8");
      for (BiFunction<String, String, String> fileCustomizer: fileCustomizers){
        getLog().info(String.format("Customizing content of %s using file customizer: %s", fileName, fileCustomizer.getClass().getName()));
        content = fileCustomizer.apply(fileName, content);
        if (org.apache.commons.lang3.StringUtils.isBlank(content)){
          getLog().error(String.format("FileCustomizer '%s' returned a blank string where (a modified version of) the file %s was expected", fileCustomizer.getClass().getName(), fileName));
          break;
        }
      }
      org.apache.commons.io.FileUtils.writeStringToFile(dest, content, "UTF-8");
    } catch (IOException e) {
      throw new RuntimeException("Customzing file failed due to IOException", e);
    }
  }

  private Optional<BiFunction<String, String, String>> getFileCustomizer() throws MojoExecutionException {
    String fileCustomizer = generateUiConfig==null ? null : generateUiConfig.getFileCustomizer();
    if (StringUtils.isBlank(fileCustomizer)){
      return Optional.empty();
    }
    BiFunction<String, String, String> fileCustomizerInstance;
    try {
      ClassLoader classloader = ClassLoader.getSystemClassLoader();//Thread.currentThread().getContextClassLoader();
      final Class<?> fileCustomizerClass = Class.forName(fileCustomizer, true, getClassLoader(this.project));
      if (BiFunction.class.isAssignableFrom(fileCustomizerClass)) {
        fileCustomizerInstance = (BiFunction<String, String, String>) fileCustomizerClass.newInstance();
      } else {
        throw new MojoExecutionException(String.format("Class %s has to be a subclass of %s", fileCustomizerClass.getName(), BiFunction.class));
      }
    } catch (ClassNotFoundException e) {
      throw new MojoExecutionException(String.format("Could not find configured fileCustomizer %s", fileCustomizer), e);
    } catch (InstantiationException e) {
      throw new MojoExecutionException(String.format("Could not instantiate configured fileCustomizer %s", fileCustomizer), e);
    }
    catch (IllegalAccessException e) {
      throw new MojoExecutionException(String.format("Could not instantiate configured fileCustomizer %s", fileCustomizer), e);
    }
    return Optional.of(fileCustomizerInstance);
  }

  /**
   * This method is a copy of https://stackoverflow.com/a/49755556/6095334, which in turn comes from  Hibernate.
   */
  private ClassLoader getClassLoader(MavenProject project)
  {
    try
    {
      List classpathElements = project.getCompileClasspathElements();
      classpathElements.add( project.getBuild().getOutputDirectory() );
      classpathElements.add( project.getBuild().getTestOutputDirectory() );
      URL urls[] = new URL[classpathElements.size()];
      for ( int i = 0; i < classpathElements.size(); ++i )
      {
        urls[i] = new File( (String) classpathElements.get( i ) ).toURL();
      }
      return new URLClassLoader( urls, this.getClass().getClassLoader() );
    }
    catch ( Exception e )
    {
      getLog().debug( "Couldn't get the classloader." );
      return this.getClass().getClassLoader();
    }
  }

  private void updateIndexHtmlWithPathToSwaggerDoc(File dest2) {
    getLog().info("updating index.html with path to generated swagger.json");
    try {
      String content = org.apache.commons.io.FileUtils.readFileToString(dest2, "UTF-8");
      //https://stackoverflow.com/a/50510597/6095334
      //String javascriptExpForGettingPathToJson = "window.location.href.substring(0, window.location.href.lastIndexOf(\"/\")) + '/swagger/swagger.json'";
      //content = content.replaceAll("\"https://petstore.swagger.io/v2/swagger.json\"", "window.location.protocol + '//' + window.location.host + '/doc/swagger/swagger.json'");
      content = content.replaceAll("\"https://petstore.swagger.io/v2/swagger.json\"", "window.location.href.substring(0, window.location.href.lastIndexOf(\"/\")) + '/swagger.json'");
      // content = content.replaceAll("\"./swagger-ui", "\"./swagger/ui/swagger-ui");
      content = content.replaceAll("href=\"./", "href=\"./swagger/ui/");
      content = content.replaceAll("src=\"./", "src=\"./swagger/ui/");
      org.apache.commons.io.FileUtils.writeStringToFile(dest2, content, "UTF-8");
    } catch (IOException e) {
      //Simple exception handling, replace with what's necessary for your use case!
      getLog().error(e);
      throw new RuntimeException("Generating file failed", e);
    }

    /*String content = IOUtils.toString(new FileInputStream(myfile), myencoding);
    content = content.replaceAll(myPattern, myReplacement);
    IOUtils.write(content, new FileOutputStream(myfile), myencoding);*/
  }

  private void copySwaggerUiJaxRsResourceToBuildOutputDir() throws MojoExecutionException {
    getLog().info("copySwaggerUiJaxRsResourceToBuildOutputDir()");
    ClassFileCopier classFileCopier = ClassFileCopier.
        builder()
        .log(getLog())
        .project(project)
        .resourcePackages(generateDocConfig.getResourcePackagesWithFallback(project))
        .build();
    Class<?> restType = generateDocConfig.getRestAnnotationType().getSwaggerUiResource();
    String sourceCodeWithCorrectedPackage = classFileCopier.getSourceCode(restType);
    //String sourceCodeWithCorrectedPackageAndPathLogger = addEvenListener(sourceCodeWithCorrectedPackage);
    classFileCopier.copyResourceToBuildOutputDir(restType.getSimpleName(), sourceCodeWithCorrectedPackage, generateDocConfig.getRestAnnotationType().getRestAnnotationTypes());
  }

/*  private String addEvenListener(String sourceCodeWithCorrectedPackage) {
    int index = sourceCodeWithCorrectedPackage.lastIndexOf('}');
    String path = getGenerateDocConfig().getApiDocsUrl();
    String eventListener = "" +
        "@org.springframework.context.event.EventListener(org.springframework.boot.context.event.ApplicationReadyEvent.class)\n" +
        "public void logPathToSwaggerUi() {\n" +
        "    System.out.println(\"SwaggerUI is available at "+path+"\");\n" +
        "}";
    return sourceCodeWithCorrectedPackage.substring(0, index) + eventListener + "}";
  }*/

  /* *//**
   * Generates the following:
   * <ul>
   *   <li>The swagger-ui single page app in the form of a directory of css, html and javascript files.</li>
   *   <li>A JAX-RS annotated java class, i.e. a class with endpoints configured to return a) the swagger-ui index page and b) the generated swagger.json document.</li>
   * </ul>
   * Notice that the location of the generated JAX-RS annotated java class is configurable by the following property: TODO:
   *//*
  private void copyGetSwaggerUiResourceSourceClassToGeneratedResources() throws IOException {
    getLog().info("copyGetSwaggerUiResourceSourceClassToGeneratedResources");
    //Copy-paste swagger-ui webjar content into some folder? fx generated-resources/swagger/
    //Configure springdoc-swagger-ui by somehow setting the property springdoc.swagger-ui.url= [...]/swagger.json
    //Not like this, but based on standard JAX-RS annotations: https://github.com/springdoc/springdoc-openapi/blob/master/springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWebMvcConfigurer.java
    //Programmatically add generated sources such as to spare the user of this plugin the need for doing it himself/herself via the build-hepler-maven-plugin. See https://stackoverflow.com/a/30760908/6095334

    ClassLoader classloader = Thread.currentThread().getContextClassLoader();
    URL inputUrl = classloader.getResource("com/github/hervian/swagger/GetSwaggerUiResource.class");
    *//*getLog().info("step 1");
    getLog().info("inputUrl!=null: " + Boolean.toString(inputUrl!=null));
    getLog().info("step 2");
    InputStream getSwaggerUiResourceClassFile = classloader.getResourceAsStream("com/github/hervian/swagger/GetSwaggerUiResource.class");
    getLog().info("getSwaggerUiResourceClassFile!=null: " + Boolean.toString(getSwaggerUiResourceClassFile!=null));
    getLog().info("step 3");
    System.out.println( getClass().getResource(GetSwaggerUiResource.class.getName() + ".class") );
    getLog().info("step 4");
    getLog().info("getSwaggerUiResourceClassFile!=null: " + Boolean.toString(getSwaggerUiResourceClassFile!=null));
    getLog().info("step 5");*//*
    File dest = new File(project.getBuild().getOutputDirectory() + "/com/github/hervian/swagger/GetSwaggerUiResource.class");// + "/generated-sources");
    FileUtils.copyStreamToFile(new InputStreamFacade() {

      @Override
      public InputStream getInputStream() throws IOException
      {
        return inputUrl.openStream();
      }
    }, dest);
    getLog().info(String.format("Copied %s to %s", GetSwaggerUiResource.class.getName(), dest.getAbsolutePath()));
   project.addCompileSourceRoot(project.getBuild().getOutputDirectory() + "/generated-sources");
  }*/

}
