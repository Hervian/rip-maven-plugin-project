package com.github.hervian.rip.client.publishers;

import com.github.hervian.rip.config.GenerateClientConfig;
import com.github.hervian.rip.util.MojoExecutorWrapper;
import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.MojoExecutionException;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.TagOpt;
import org.twdata.maven.mojoexecutor.MojoExecutor;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.Arrays;

import static org.twdata.maven.mojoexecutor.MojoExecutor.artifactId;
import static org.twdata.maven.mojoexecutor.MojoExecutor.configuration;
import static org.twdata.maven.mojoexecutor.MojoExecutor.element;
import static org.twdata.maven.mojoexecutor.MojoExecutor.executionEnvironment;
import static org.twdata.maven.mojoexecutor.MojoExecutor.goal;
import static org.twdata.maven.mojoexecutor.MojoExecutor.groupId;
import static org.twdata.maven.mojoexecutor.MojoExecutor.name;
import static org.twdata.maven.mojoexecutor.MojoExecutor.plugin;
import static org.twdata.maven.mojoexecutor.MojoExecutor.version;

public class DartClientPublisher implements ClientPublisher {

  /**
   * Target should be configurable.
   * Examples:
   * One can depend on a package on a git server. So one option should be to run 'git push...'
   * One can depend on a package in pub package repo, fx pub.dev, in which case we should run 'dart publish'
   *
   * Publishing to a custom package repository: https://dart.dev/tools/pub/custom-package-repositories
   */
  @Override
  public ClientPublisherOutput publish(ClientPublisherInput clientPublisherInput) throws MojoExecutionException {
    try {
      File dartClientFolder = new File(clientPublisherInput.getClientGeneratorOutput().getPath());

      GenerateClientConfig.DartConfig dartConfig = clientPublisherInput.getClientConfig().getDartConfig();
      if (dartConfig.getPublishTarget() == GenerateClientConfig.DartConfig.PublishTarget.GIT) {
        publishToGitServer(clientPublisherInput, dartClientFolder, dartConfig);
      } else if (dartConfig.getPublishTarget() == GenerateClientConfig.DartConfig.PublishTarget.DART_REPO) {
        publishToDartRepo(clientPublisherInput, dartClientFolder, dartConfig);
      }
      return null;
    } catch (Exception e) {
      throw new MojoExecutionException(e);
    }
  }

  private void publishToGitServer(ClientPublisherInput clientPublisherInput, File dartClientFolder, GenerateClientConfig.DartConfig dartConfig) throws IOException, GitAPIException, MojoExecutionException {
    /* create tmp folder
     cd into newly created tmp folder
     git clone <URL>
     delete content of new folder except the .git file
     copy the new dart client (<DIR>) into the new tmp folder.
     git add .
     git commit -m "autogenerated dart REST client, version <VERSION>"
     git tag -a "<VERSION>" HEAD -m "autogenerated dart REST client, version <VERSION>" //https://devconnected.com/how-to-create-git-tags/
     git push --follow-tags //ought to push both the commit and the tag. See https://stackoverflow.com/questions/3745135/push-git-commits-tags-simultaneously
   //NB: When depending on above deployed version you must specify the version in the 'ref' tag and not in the 'version' tag
   //That is because dart treats the REF attribute as the name of the git branch it should checkout and use.*/
    File gitRepo = Files.createTempDirectory("ripMavenPlugin_" + clientPublisherInput.getPropertiesReader().getArtifactId() + "_dartClient").toFile();
    gitRepo.deleteOnExit();

    Git.cloneRepository()
        .setURI(dartConfig.getUrl())//"https://github.com/eclipse/jgit.git")
        .setDirectory(gitRepo)
        .call();
    Git git = Git.open(dartClientFolder);
    git.pull().setTagOpt(TagOpt.FETCH_TAGS).call(); //TODO: Is this necessary?
    //Note that we are now on whatever branch the remote's head is on, i.e. usually the master branch.

    //Copy .git file to generated dart client folder:
    if (!dartClientFolder.exists()) {
      throw new MojoExecutionException("Unable to find the folder of the generated Dart client.");
    }
    FileUtils.copyDirectory(new File(gitRepo, ".git"), dartClientFolder);


    git.add().addFilepattern(".").call();
    String commitMsg = "autogenerated dart REST client, version " + clientPublisherInput.getProject().getVersion();
    git.commit().setMessage("commitMsg").call();
    git.tag().setName(clientPublisherInput.getProject().getVersion()).setMessage(commitMsg).setAnnotated(true).call();
    //git.push().setPushOptions(Lists.newArrayList("--follow-tags")).call();
  }

  private void publishToDartRepo(ClientPublisherInput clientPublisherInput, File dartClientFolder, GenerateClientConfig.DartConfig dartConfig) throws IOException, MojoExecutionException {
    //Step 1: edit the pubspec.yaml by adding a publish_to property:
    File pubspec = Arrays.stream(dartClientFolder.listFiles()).filter(file -> !file.isDirectory() && file.getName().equalsIgnoreCase("pubspec.yaml")).findFirst().get();
    clientPublisherInput.getLog().info("pubspec.yaml file found. Will now update the publish_to attribute (and fail if no such attribute if found on the generated dart client library)");
    String fileContext = FileUtils.readFileToString(pubspec, StandardCharsets.UTF_8);
    if (!fileContext.contains("publish_to: none")) {
      throw new MojoExecutionException("The generated dart client's pubspec.yaml dit not contain any 'publish_to: none' property (which is normally generated by default)");
    }
    System.out.println("pubspec.yaml before editing: \n" + fileContext);
    fileContext = fileContext.replace("publish_to: none", "publish_to: " + dartConfig.getUrl()); //For now, lets not allow publishing to pub.dev  unless explicitly defined in the URL property by the plugin user.
    System.out.println("\npubspec.yaml after editing: \n" + fileContext);
    FileUtils.write(pubspec, fileContext, StandardCharsets.UTF_8);

    //Step 2: configure the dart tool to use a token for all calls to the configured dart repo:
    dart(clientPublisherInput, "pub", "token", "add", dartConfig.getUrl(), "--env-var", "DART_SECRET_TOKEN"); //https://dart.dev/tools/pub/custom-package-repositories

    //Step 3: publish
    dart(clientPublisherInput, "pub", "publish", "--dry-run"); //dry run for now...
  }

  private void dart(ClientPublisherInput clientPublisherInput, String... args) throws MojoExecutionException {
    MojoExecutor.Element[] argsAsElements = new MojoExecutor.Element[args.length];
    for (int i=0; i<args.length; i++) {
      argsAsElements[i] = element(name("argument"), args[i]);
    }
    MojoExecutorWrapper.executeMojo(
        plugin(
            groupId("org.codehaus.mojo"),
            artifactId("exec-maven-plugin"),
            version(clientPublisherInput.getPropertiesReader().getExecMavenPluginVersion())
        ),
        goal("exec"),
        configuration(
            element(name("executable"), "dart"),
           element(name("arguments"), argsAsElements)
        ),
        executionEnvironment(
            clientPublisherInput.getProject(),
            clientPublisherInput.getMavenSession(),
            clientPublisherInput.getPluginManager()
        )
    );
  }

}
